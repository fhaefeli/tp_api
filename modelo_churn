{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Importamos las librerias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib.ticker as mtick\n",
    "from matplotlib.colors import ListedColormap\n",
    "%matplotlib inline\n",
    "\n",
    "import seaborn as sns\n",
    "sns.set(style = 'white')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Cargamos nuestro DataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>orders</th>\n",
       "      <th>order_date</th>\n",
       "      <th>city</th>\n",
       "      <th>app_type</th>\n",
       "      <th>charge</th>\n",
       "      <th>service_type</th>\n",
       "      <th>registration</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>lifecycle</th>\n",
       "      <th>income</th>\n",
       "      <th>status</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Kzu3HUtSRUw4wObKwwA</th>\n",
       "      <td>1236995587</td>\n",
       "      <td>20/07/2024</td>\n",
       "      <td>Hurlingham</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>16/07/2020</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>MID</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UBay5UBjlZpoT7XCvw</th>\n",
       "      <td>1227025281</td>\n",
       "      <td>09/07/2024</td>\n",
       "      <td>Pilar</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>02/04/2022</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UBay5UBjlZpoT7XCvw</th>\n",
       "      <td>1287277294</td>\n",
       "      <td>19/09/2024</td>\n",
       "      <td>Escobar</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>02/04/2022</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UBay5UBjlZpoT7XCvw</th>\n",
       "      <td>1265083072</td>\n",
       "      <td>24/08/2024</td>\n",
       "      <td>Pilar</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>02/04/2022</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>UBay5UBjlZpoT7XCvw</th>\n",
       "      <td>1184304752</td>\n",
       "      <td>26/05/2024</td>\n",
       "      <td>Pilar</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>02/04/2022</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>Stable</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Active</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         orders  order_date        city app_type  charge  \\\n",
       "user_id                                                                    \n",
       "Kzu3HUtSRUw4wObKwwA  1236995587  20/07/2024  Hurlingham  ANDROID     0.0   \n",
       "UBay5UBjlZpoT7XCvw   1227025281  09/07/2024       Pilar  ANDROID     0.0   \n",
       "UBay5UBjlZpoT7XCvw   1287277294  19/09/2024     Escobar  ANDROID     0.0   \n",
       "UBay5UBjlZpoT7XCvw   1265083072  24/08/2024       Pilar  ANDROID     0.0   \n",
       "UBay5UBjlZpoT7XCvw   1184304752  26/05/2024       Pilar  ANDROID     0.0   \n",
       "\n",
       "                    service_type registration  age   gender  lifecycle  \\\n",
       "user_id                                                                  \n",
       "Kzu3HUtSRUw4wObKwwA          NaN   16/07/2020  NaN  UNKNOWN  Onboarded   \n",
       "UBay5UBjlZpoT7XCvw           NaN   02/04/2022  NaN  UNKNOWN     Stable   \n",
       "UBay5UBjlZpoT7XCvw           NaN   02/04/2022  NaN  UNKNOWN     Stable   \n",
       "UBay5UBjlZpoT7XCvw           NaN   02/04/2022  NaN  UNKNOWN     Stable   \n",
       "UBay5UBjlZpoT7XCvw           NaN   02/04/2022  NaN  UNKNOWN     Stable   \n",
       "\n",
       "                       income  status  \n",
       "user_id                                \n",
       "Kzu3HUtSRUw4wObKwwA       MID  Active  \n",
       "UBay5UBjlZpoT7XCvw   MID-HIGH  Active  \n",
       "UBay5UBjlZpoT7XCvw   MID-HIGH  Active  \n",
       "UBay5UBjlZpoT7XCvw   MID-HIGH  Active  \n",
       "UBay5UBjlZpoT7XCvw   MID-HIGH  Active  "
      ]
     },
     "execution_count": 205,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset = pd.read_csv('//wsl.localhost/Ubuntu/home/fhaefeli/api_tp/dataset_clientes.csv', index_col=0, sep=',', encoding='latin-1')\n",
    "\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "El dataset tiene 471630 filas y 12 columnas\n"
     ]
    }
   ],
   "source": [
    "#Verificar cantidad de filas y columnas del dataset\n",
    "print('El dataset tiene {} filas y {} columnas'.format(dataset.shape[0],dataset.shape[1]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Limpieza de datos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "orders            int64\n",
       "order_date       object\n",
       "city             object\n",
       "app_type         object\n",
       "charge          float64\n",
       "service_type     object\n",
       "registration     object\n",
       "age             float64\n",
       "gender           object\n",
       "lifecycle        object\n",
       "income           object\n",
       "status           object\n",
       "dtype: object"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#verificaf los tipos de datos\n",
    "dataset.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\flore\\AppData\\Local\\Temp\\ipykernel_33328\\3932538539.py:2: UserWarning: Parsing dates in %d/%m/%Y format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n",
      "  dataset['registration'] = pd.to_datetime(dataset['registration'])\n",
      "C:\\Users\\flore\\AppData\\Local\\Temp\\ipykernel_33328\\3932538539.py:3: UserWarning: Parsing dates in %d/%m/%Y format when dayfirst=False (the default) was specified. Pass `dayfirst=True` or specify a format to silence this warning.\n",
      "  dataset['order_date'] = pd.to_datetime(dataset['order_date'])\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "orders                   int64\n",
       "order_date      datetime64[ns]\n",
       "city                    object\n",
       "app_type                object\n",
       "charge                 float64\n",
       "service_type            object\n",
       "registration    datetime64[ns]\n",
       "age                    float64\n",
       "gender                  object\n",
       "lifecycle               object\n",
       "income                  object\n",
       "status                  object\n",
       "dtype: object"
      ]
     },
     "execution_count": 208,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#cambiar a formato fecha las columnas order_date y registration\n",
    "dataset['registration'] = pd.to_datetime(dataset['registration'])\n",
    "dataset['order_date'] = pd.to_datetime(dataset['order_date'])\n",
    "dataset.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>qorders</th>\n",
       "      <th>order_date</th>\n",
       "      <th>app_type</th>\n",
       "      <th>service_type</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>income</th>\n",
       "      <th>lifecycle</th>\n",
       "      <th>registration</th>\n",
       "      <th>status</th>\n",
       "      <th>days_since_registration</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>001sxkL5WDT7t55Krxgug</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-06-07</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FEMALE</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Heavy</td>\n",
       "      <td>2018-01-27</td>\n",
       "      <td>Churn</td>\n",
       "      <td>2437</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00D9lwosWsm5Ix1ov6ZPDg</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-06-29</td>\n",
       "      <td>IPHONE</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2016-04-26</td>\n",
       "      <td>Active</td>\n",
       "      <td>3078</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00KIlPPdUp6rID_hYO5VeQ</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-LOW</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2021-06-05</td>\n",
       "      <td>Churn</td>\n",
       "      <td>1212</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00ROwAuUX6u96xrmDhwVA</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-05-12</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>GROCERIES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2023-01-14</td>\n",
       "      <td>Active</td>\n",
       "      <td>624</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00lWWjn9WAKt_mPnzmfXQ</th>\n",
       "      <td>13</td>\n",
       "      <td>2024-05-27</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>COFFEE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FEMALE</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Stable</td>\n",
       "      <td>2016-10-14</td>\n",
       "      <td>Active</td>\n",
       "      <td>2907</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzA8D3g5XXmYWCKDfBpDdg</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-08-23</td>\n",
       "      <td>IPHONE</td>\n",
       "      <td>GROCERIES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2015-06-09</td>\n",
       "      <td>Active</td>\n",
       "      <td>3400</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzHZt2x5WOyqCcL7rsSggA</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-04-06</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>GROCERIES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2021-12-21</td>\n",
       "      <td>Churn</td>\n",
       "      <td>1013</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzb6Xm_IXpuoPah8TFc_g</th>\n",
       "      <td>6</td>\n",
       "      <td>2024-05-27</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-LOW</td>\n",
       "      <td>Stable</td>\n",
       "      <td>2024-04-10</td>\n",
       "      <td>Active</td>\n",
       "      <td>172</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzpiOXdOU1qRgsO8WOjq5Q</th>\n",
       "      <td>106</td>\n",
       "      <td>2024-05-27</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>KIOSKS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Heavy</td>\n",
       "      <td>2021-01-23</td>\n",
       "      <td>Active</td>\n",
       "      <td>1345</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzrc7LrYXdCB93wMRgO_SQ</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-04-20</td>\n",
       "      <td>IPHONE</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID-HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2023-02-20</td>\n",
       "      <td>Churn</td>\n",
       "      <td>587</td>\n",
       "      <td>162</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>26136 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        qorders order_date app_type service_type  age  \\\n",
       "user_id                                                                 \n",
       "001sxkL5WDT7t55Krxgug         2 2024-06-07  ANDROID         None  NaN   \n",
       "00D9lwosWsm5Ix1ov6ZPDg        1 2024-06-29   IPHONE         None  NaN   \n",
       "00KIlPPdUp6rID_hYO5VeQ        1 2024-05-08  ANDROID         None  NaN   \n",
       "00ROwAuUX6u96xrmDhwVA         5 2024-05-12  ANDROID    GROCERIES  NaN   \n",
       "00lWWjn9WAKt_mPnzmfXQ        13 2024-05-27  ANDROID       COFFEE  NaN   \n",
       "...                         ...        ...      ...          ...  ...   \n",
       "zzA8D3g5XXmYWCKDfBpDdg        1 2024-08-23   IPHONE    GROCERIES  NaN   \n",
       "zzHZt2x5WOyqCcL7rsSggA        5 2024-04-06  ANDROID    GROCERIES  NaN   \n",
       "zzb6Xm_IXpuoPah8TFc_g         6 2024-05-27  ANDROID         None  NaN   \n",
       "zzpiOXdOU1qRgsO8WOjq5Q      106 2024-05-27  ANDROID       KIOSKS  NaN   \n",
       "zzrc7LrYXdCB93wMRgO_SQ        2 2024-04-20   IPHONE         None  NaN   \n",
       "\n",
       "                         gender    income  lifecycle registration  status  \\\n",
       "user_id                                                                     \n",
       "001sxkL5WDT7t55Krxgug    FEMALE  MID-HIGH      Heavy   2018-01-27   Churn   \n",
       "00D9lwosWsm5Ix1ov6ZPDg  UNKNOWN  MID-HIGH  Onboarded   2016-04-26  Active   \n",
       "00KIlPPdUp6rID_hYO5VeQ  UNKNOWN   MID-LOW  Onboarded   2021-06-05   Churn   \n",
       "00ROwAuUX6u96xrmDhwVA   UNKNOWN  MID-HIGH  Onboarded   2023-01-14  Active   \n",
       "00lWWjn9WAKt_mPnzmfXQ    FEMALE  MID-HIGH     Stable   2016-10-14  Active   \n",
       "...                         ...       ...        ...          ...     ...   \n",
       "zzA8D3g5XXmYWCKDfBpDdg  UNKNOWN  MID-HIGH  Onboarded   2015-06-09  Active   \n",
       "zzHZt2x5WOyqCcL7rsSggA  UNKNOWN  MID-HIGH  Onboarded   2021-12-21   Churn   \n",
       "zzb6Xm_IXpuoPah8TFc_g   UNKNOWN   MID-LOW     Stable   2024-04-10  Active   \n",
       "zzpiOXdOU1qRgsO8WOjq5Q  UNKNOWN  MID-HIGH      Heavy   2021-01-23  Active   \n",
       "zzrc7LrYXdCB93wMRgO_SQ  UNKNOWN  MID-HIGH  Onboarded   2023-02-20   Churn   \n",
       "\n",
       "                        days_since_registration  days_since_last_purchase  \n",
       "user_id                                                                    \n",
       "001sxkL5WDT7t55Krxgug                      2437                       114  \n",
       "00D9lwosWsm5Ix1ov6ZPDg                     3078                        92  \n",
       "00KIlPPdUp6rID_hYO5VeQ                     1212                       144  \n",
       "00ROwAuUX6u96xrmDhwVA                       624                       140  \n",
       "00lWWjn9WAKt_mPnzmfXQ                      2907                       125  \n",
       "...                                         ...                       ...  \n",
       "zzA8D3g5XXmYWCKDfBpDdg                     3400                        37  \n",
       "zzHZt2x5WOyqCcL7rsSggA                     1013                       176  \n",
       "zzb6Xm_IXpuoPah8TFc_g                       172                       125  \n",
       "zzpiOXdOU1qRgsO8WOjq5Q                     1345                       125  \n",
       "zzrc7LrYXdCB93wMRgO_SQ                      587                       162  \n",
       "\n",
       "[26136 rows x 12 columns]"
      ]
     },
     "execution_count": 209,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#crear un dataframe para trabajar con los datos necesarios agrupados por user_id\n",
    "df = dataset.groupby('user_id').agg({'orders':'count',\n",
    "                                        'order_date':'last',\n",
    "                                        # 'city':'last',\n",
    "                                        'app_type':'last',\n",
    "                                        'service_type':'last',\n",
    "                                        'age':'last',\n",
    "                                        'gender':'last',\n",
    "                                        'income':'last',\n",
    "                                        'lifecycle':'last',\n",
    "                                        'registration':'last',\n",
    "                                        'status':'last'})\n",
    "\n",
    " #crear los campos calculados \"diferencia de días\"                                       \n",
    "df['days_since_registration'] = (pd.to_datetime('today') - df['registration']).dt.days\n",
    "df['days_since_last_purchase'] = (pd.to_datetime('today') - df['order_date']).dt.days\n",
    "\n",
    "#crear campo cantidad de ciudades asociadas a un mismo user_id\n",
    "# df['qcity'] = dataset.groupby('user_id')['city'].nunique() #no usar, no aporta valor\n",
    "\n",
    "#renombrar columna\n",
    "df.rename(columns={'orders':'qorders'}, inplace=True)\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>qorders</th>\n",
       "      <th>order_date</th>\n",
       "      <th>app_type</th>\n",
       "      <th>service_type</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>income</th>\n",
       "      <th>lifecycle</th>\n",
       "      <th>registration</th>\n",
       "      <th>status</th>\n",
       "      <th>days_since_registration</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>001sxkL5WDT7t55Krxgug</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-06-07</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FEMALE</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Heavy</td>\n",
       "      <td>2018-01-27</td>\n",
       "      <td>Churn</td>\n",
       "      <td>2437</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00D9lwosWsm5Ix1ov6ZPDg</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-06-29</td>\n",
       "      <td>IPHONE</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2016-04-26</td>\n",
       "      <td>Active</td>\n",
       "      <td>3078</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00KIlPPdUp6rID_hYO5VeQ</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-05-08</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_LOW</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2021-06-05</td>\n",
       "      <td>Churn</td>\n",
       "      <td>1212</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00ROwAuUX6u96xrmDhwVA</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-05-12</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>GROCERIES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2023-01-14</td>\n",
       "      <td>Active</td>\n",
       "      <td>624</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00lWWjn9WAKt_mPnzmfXQ</th>\n",
       "      <td>13</td>\n",
       "      <td>2024-05-27</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>COFFEE</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FEMALE</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Stable</td>\n",
       "      <td>2016-10-14</td>\n",
       "      <td>Active</td>\n",
       "      <td>2907</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzA8D3g5XXmYWCKDfBpDdg</th>\n",
       "      <td>1</td>\n",
       "      <td>2024-08-23</td>\n",
       "      <td>IPHONE</td>\n",
       "      <td>GROCERIES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2015-06-09</td>\n",
       "      <td>Active</td>\n",
       "      <td>3400</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzHZt2x5WOyqCcL7rsSggA</th>\n",
       "      <td>5</td>\n",
       "      <td>2024-04-06</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>GROCERIES</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2021-12-21</td>\n",
       "      <td>Churn</td>\n",
       "      <td>1013</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzb6Xm_IXpuoPah8TFc_g</th>\n",
       "      <td>6</td>\n",
       "      <td>2024-05-27</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_LOW</td>\n",
       "      <td>Stable</td>\n",
       "      <td>2024-04-10</td>\n",
       "      <td>Active</td>\n",
       "      <td>172</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzpiOXdOU1qRgsO8WOjq5Q</th>\n",
       "      <td>106</td>\n",
       "      <td>2024-05-27</td>\n",
       "      <td>ANDROID</td>\n",
       "      <td>KIOSKS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Heavy</td>\n",
       "      <td>2021-01-23</td>\n",
       "      <td>Active</td>\n",
       "      <td>1345</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzrc7LrYXdCB93wMRgO_SQ</th>\n",
       "      <td>2</td>\n",
       "      <td>2024-04-20</td>\n",
       "      <td>IPHONE</td>\n",
       "      <td>None</td>\n",
       "      <td>NaN</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>2023-02-20</td>\n",
       "      <td>Churn</td>\n",
       "      <td>587</td>\n",
       "      <td>162</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>26136 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        qorders order_date app_type service_type  age  \\\n",
       "user_id                                                                 \n",
       "001sxkL5WDT7t55Krxgug         2 2024-06-07  ANDROID         None  NaN   \n",
       "00D9lwosWsm5Ix1ov6ZPDg        1 2024-06-29   IPHONE         None  NaN   \n",
       "00KIlPPdUp6rID_hYO5VeQ        1 2024-05-08  ANDROID         None  NaN   \n",
       "00ROwAuUX6u96xrmDhwVA         5 2024-05-12  ANDROID    GROCERIES  NaN   \n",
       "00lWWjn9WAKt_mPnzmfXQ        13 2024-05-27  ANDROID       COFFEE  NaN   \n",
       "...                         ...        ...      ...          ...  ...   \n",
       "zzA8D3g5XXmYWCKDfBpDdg        1 2024-08-23   IPHONE    GROCERIES  NaN   \n",
       "zzHZt2x5WOyqCcL7rsSggA        5 2024-04-06  ANDROID    GROCERIES  NaN   \n",
       "zzb6Xm_IXpuoPah8TFc_g         6 2024-05-27  ANDROID         None  NaN   \n",
       "zzpiOXdOU1qRgsO8WOjq5Q      106 2024-05-27  ANDROID       KIOSKS  NaN   \n",
       "zzrc7LrYXdCB93wMRgO_SQ        2 2024-04-20   IPHONE         None  NaN   \n",
       "\n",
       "                         gender    income  lifecycle registration  status  \\\n",
       "user_id                                                                     \n",
       "001sxkL5WDT7t55Krxgug    FEMALE  MID_HIGH      Heavy   2018-01-27   Churn   \n",
       "00D9lwosWsm5Ix1ov6ZPDg  UNKNOWN  MID_HIGH  Onboarded   2016-04-26  Active   \n",
       "00KIlPPdUp6rID_hYO5VeQ  UNKNOWN   MID_LOW  Onboarded   2021-06-05   Churn   \n",
       "00ROwAuUX6u96xrmDhwVA   UNKNOWN  MID_HIGH  Onboarded   2023-01-14  Active   \n",
       "00lWWjn9WAKt_mPnzmfXQ    FEMALE  MID_HIGH     Stable   2016-10-14  Active   \n",
       "...                         ...       ...        ...          ...     ...   \n",
       "zzA8D3g5XXmYWCKDfBpDdg  UNKNOWN  MID_HIGH  Onboarded   2015-06-09  Active   \n",
       "zzHZt2x5WOyqCcL7rsSggA  UNKNOWN  MID_HIGH  Onboarded   2021-12-21   Churn   \n",
       "zzb6Xm_IXpuoPah8TFc_g   UNKNOWN   MID_LOW     Stable   2024-04-10  Active   \n",
       "zzpiOXdOU1qRgsO8WOjq5Q  UNKNOWN  MID_HIGH      Heavy   2021-01-23  Active   \n",
       "zzrc7LrYXdCB93wMRgO_SQ  UNKNOWN  MID_HIGH  Onboarded   2023-02-20   Churn   \n",
       "\n",
       "                        days_since_registration  days_since_last_purchase  \n",
       "user_id                                                                    \n",
       "001sxkL5WDT7t55Krxgug                      2437                       114  \n",
       "00D9lwosWsm5Ix1ov6ZPDg                     3078                        92  \n",
       "00KIlPPdUp6rID_hYO5VeQ                     1212                       144  \n",
       "00ROwAuUX6u96xrmDhwVA                       624                       140  \n",
       "00lWWjn9WAKt_mPnzmfXQ                      2907                       125  \n",
       "...                                         ...                       ...  \n",
       "zzA8D3g5XXmYWCKDfBpDdg                     3400                        37  \n",
       "zzHZt2x5WOyqCcL7rsSggA                     1013                       176  \n",
       "zzb6Xm_IXpuoPah8TFc_g                       172                       125  \n",
       "zzpiOXdOU1qRgsO8WOjq5Q                     1345                       125  \n",
       "zzrc7LrYXdCB93wMRgO_SQ                      587                       162  \n",
       "\n",
       "[26136 rows x 12 columns]"
      ]
     },
     "execution_count": 210,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#reemplazar los espacios y giones por guiones bajos:\n",
    "df['lifecycle'] = df['lifecycle'].str.replace(' ','_')\n",
    "df['income'] = df['income'].str.replace(' ','_')\n",
    "df['income'] = df['income'].str.replace('-','_')\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "qorders                         0\n",
       "order_date                      0\n",
       "app_type                        0\n",
       "service_type                14139\n",
       "age                         26110\n",
       "gender                        227\n",
       "income                          0\n",
       "lifecycle                       0\n",
       "registration                    0\n",
       "status                          0\n",
       "days_since_registration         0\n",
       "days_since_last_purchase        0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 211,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#revisar si tenemos valores nulos\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['FEMALE', 'UNKNOWN', 'MALE', None], dtype=object)"
      ]
     },
     "execution_count": 212,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#ver valores unicos en columna orders\n",
    "df['gender'].unique()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\flore\\AppData\\Local\\Temp\\ipykernel_33328\\420181890.py:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n",
      "The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n",
      "\n",
      "For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n",
      "\n",
      "\n",
      "  df['gender'].fillna(\"UNKNOWN\", inplace=True)\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>qorders</th>\n",
       "      <th>gender</th>\n",
       "      <th>income</th>\n",
       "      <th>lifecycle</th>\n",
       "      <th>status</th>\n",
       "      <th>days_since_registration</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>001sxkL5WDT7t55Krxgug</th>\n",
       "      <td>2</td>\n",
       "      <td>FEMALE</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Heavy</td>\n",
       "      <td>Churn</td>\n",
       "      <td>2437</td>\n",
       "      <td>114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00D9lwosWsm5Ix1ov6ZPDg</th>\n",
       "      <td>1</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>Active</td>\n",
       "      <td>3078</td>\n",
       "      <td>92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00KIlPPdUp6rID_hYO5VeQ</th>\n",
       "      <td>1</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_LOW</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>Churn</td>\n",
       "      <td>1212</td>\n",
       "      <td>144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00ROwAuUX6u96xrmDhwVA</th>\n",
       "      <td>5</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>Active</td>\n",
       "      <td>624</td>\n",
       "      <td>140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00lWWjn9WAKt_mPnzmfXQ</th>\n",
       "      <td>13</td>\n",
       "      <td>FEMALE</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Stable</td>\n",
       "      <td>Active</td>\n",
       "      <td>2907</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzA8D3g5XXmYWCKDfBpDdg</th>\n",
       "      <td>1</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>Active</td>\n",
       "      <td>3400</td>\n",
       "      <td>37</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzHZt2x5WOyqCcL7rsSggA</th>\n",
       "      <td>5</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>Churn</td>\n",
       "      <td>1013</td>\n",
       "      <td>176</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzb6Xm_IXpuoPah8TFc_g</th>\n",
       "      <td>6</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_LOW</td>\n",
       "      <td>Stable</td>\n",
       "      <td>Active</td>\n",
       "      <td>172</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzpiOXdOU1qRgsO8WOjq5Q</th>\n",
       "      <td>106</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Heavy</td>\n",
       "      <td>Active</td>\n",
       "      <td>1345</td>\n",
       "      <td>125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>zzrc7LrYXdCB93wMRgO_SQ</th>\n",
       "      <td>2</td>\n",
       "      <td>UNKNOWN</td>\n",
       "      <td>MID_HIGH</td>\n",
       "      <td>Onboarded</td>\n",
       "      <td>Churn</td>\n",
       "      <td>587</td>\n",
       "      <td>162</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>26136 rows × 7 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                        qorders   gender    income  lifecycle  status  \\\n",
       "user_id                                                                 \n",
       "001sxkL5WDT7t55Krxgug         2   FEMALE  MID_HIGH      Heavy   Churn   \n",
       "00D9lwosWsm5Ix1ov6ZPDg        1  UNKNOWN  MID_HIGH  Onboarded  Active   \n",
       "00KIlPPdUp6rID_hYO5VeQ        1  UNKNOWN   MID_LOW  Onboarded   Churn   \n",
       "00ROwAuUX6u96xrmDhwVA         5  UNKNOWN  MID_HIGH  Onboarded  Active   \n",
       "00lWWjn9WAKt_mPnzmfXQ        13   FEMALE  MID_HIGH     Stable  Active   \n",
       "...                         ...      ...       ...        ...     ...   \n",
       "zzA8D3g5XXmYWCKDfBpDdg        1  UNKNOWN  MID_HIGH  Onboarded  Active   \n",
       "zzHZt2x5WOyqCcL7rsSggA        5  UNKNOWN  MID_HIGH  Onboarded   Churn   \n",
       "zzb6Xm_IXpuoPah8TFc_g         6  UNKNOWN   MID_LOW     Stable  Active   \n",
       "zzpiOXdOU1qRgsO8WOjq5Q      106  UNKNOWN  MID_HIGH      Heavy  Active   \n",
       "zzrc7LrYXdCB93wMRgO_SQ        2  UNKNOWN  MID_HIGH  Onboarded   Churn   \n",
       "\n",
       "                        days_since_registration  days_since_last_purchase  \n",
       "user_id                                                                    \n",
       "001sxkL5WDT7t55Krxgug                      2437                       114  \n",
       "00D9lwosWsm5Ix1ov6ZPDg                     3078                        92  \n",
       "00KIlPPdUp6rID_hYO5VeQ                     1212                       144  \n",
       "00ROwAuUX6u96xrmDhwVA                       624                       140  \n",
       "00lWWjn9WAKt_mPnzmfXQ                      2907                       125  \n",
       "...                                         ...                       ...  \n",
       "zzA8D3g5XXmYWCKDfBpDdg                     3400                        37  \n",
       "zzHZt2x5WOyqCcL7rsSggA                     1013                       176  \n",
       "zzb6Xm_IXpuoPah8TFc_g                       172                       125  \n",
       "zzpiOXdOU1qRgsO8WOjq5Q                     1345                       125  \n",
       "zzrc7LrYXdCB93wMRgO_SQ                      587                       162  \n",
       "\n",
       "[26136 rows x 7 columns]"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#eliminar del df las columnas que no vamos a utilizar\n",
    "df.drop(['order_date','registration'], axis=1, inplace=True) #las necesitamos para las columnas calculadas\n",
    "df.drop(['age','service_type','app_type'], axis=1, inplace=True) #muchos valores nulos\n",
    "\n",
    "#llenar nulos con la moda\n",
    "df['gender'].fillna(\"UNKNOWN\", inplace=True)\n",
    "\n",
    "df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "qorders                     0\n",
       "gender                      0\n",
       "income                      0\n",
       "lifecycle                   0\n",
       "status                      0\n",
       "days_since_registration     0\n",
       "days_since_last_purchase    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#nuevo check de cantidad de nulos\n",
    "df.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Definimos las variables dummies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>qorders</th>\n",
       "      <th>days_since_registration</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "      <th>gender_MALE</th>\n",
       "      <th>gender_UNKNOWN</th>\n",
       "      <th>income_LOW</th>\n",
       "      <th>income_MID</th>\n",
       "      <th>income_MID_HIGH</th>\n",
       "      <th>income_MID_LOW</th>\n",
       "      <th>income_UNKNOWN</th>\n",
       "      <th>lifecycle_New</th>\n",
       "      <th>lifecycle_Onboarded</th>\n",
       "      <th>lifecycle_Prospect</th>\n",
       "      <th>lifecycle_Stable</th>\n",
       "      <th>lifecycle_Super_Heavy</th>\n",
       "      <th>status_Churn</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>user_id</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>001sxkL5WDT7t55Krxgug</th>\n",
       "      <td>2</td>\n",
       "      <td>2437</td>\n",
       "      <td>114</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00D9lwosWsm5Ix1ov6ZPDg</th>\n",
       "      <td>1</td>\n",
       "      <td>3078</td>\n",
       "      <td>92</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00KIlPPdUp6rID_hYO5VeQ</th>\n",
       "      <td>1</td>\n",
       "      <td>1212</td>\n",
       "      <td>144</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00ROwAuUX6u96xrmDhwVA</th>\n",
       "      <td>5</td>\n",
       "      <td>624</td>\n",
       "      <td>140</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>00lWWjn9WAKt_mPnzmfXQ</th>\n",
       "      <td>13</td>\n",
       "      <td>2907</td>\n",
       "      <td>125</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>True</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                        qorders  days_since_registration  \\\n",
       "user_id                                                    \n",
       "001sxkL5WDT7t55Krxgug         2                     2437   \n",
       "00D9lwosWsm5Ix1ov6ZPDg        1                     3078   \n",
       "00KIlPPdUp6rID_hYO5VeQ        1                     1212   \n",
       "00ROwAuUX6u96xrmDhwVA         5                      624   \n",
       "00lWWjn9WAKt_mPnzmfXQ        13                     2907   \n",
       "\n",
       "                        days_since_last_purchase  gender_MALE  gender_UNKNOWN  \\\n",
       "user_id                                                                         \n",
       "001sxkL5WDT7t55Krxgug                        114        False           False   \n",
       "00D9lwosWsm5Ix1ov6ZPDg                        92        False            True   \n",
       "00KIlPPdUp6rID_hYO5VeQ                       144        False            True   \n",
       "00ROwAuUX6u96xrmDhwVA                        140        False            True   \n",
       "00lWWjn9WAKt_mPnzmfXQ                        125        False           False   \n",
       "\n",
       "                        income_LOW  income_MID  income_MID_HIGH  \\\n",
       "user_id                                                           \n",
       "001sxkL5WDT7t55Krxgug        False       False             True   \n",
       "00D9lwosWsm5Ix1ov6ZPDg       False       False             True   \n",
       "00KIlPPdUp6rID_hYO5VeQ       False       False            False   \n",
       "00ROwAuUX6u96xrmDhwVA        False       False             True   \n",
       "00lWWjn9WAKt_mPnzmfXQ        False       False             True   \n",
       "\n",
       "                        income_MID_LOW  income_UNKNOWN  lifecycle_New  \\\n",
       "user_id                                                                 \n",
       "001sxkL5WDT7t55Krxgug            False           False          False   \n",
       "00D9lwosWsm5Ix1ov6ZPDg           False           False          False   \n",
       "00KIlPPdUp6rID_hYO5VeQ            True           False          False   \n",
       "00ROwAuUX6u96xrmDhwVA            False           False          False   \n",
       "00lWWjn9WAKt_mPnzmfXQ            False           False          False   \n",
       "\n",
       "                        lifecycle_Onboarded  lifecycle_Prospect  \\\n",
       "user_id                                                           \n",
       "001sxkL5WDT7t55Krxgug                 False               False   \n",
       "00D9lwosWsm5Ix1ov6ZPDg                 True               False   \n",
       "00KIlPPdUp6rID_hYO5VeQ                 True               False   \n",
       "00ROwAuUX6u96xrmDhwVA                  True               False   \n",
       "00lWWjn9WAKt_mPnzmfXQ                 False               False   \n",
       "\n",
       "                        lifecycle_Stable  lifecycle_Super_Heavy  status_Churn  \n",
       "user_id                                                                        \n",
       "001sxkL5WDT7t55Krxgug              False                  False          True  \n",
       "00D9lwosWsm5Ix1ov6ZPDg             False                  False         False  \n",
       "00KIlPPdUp6rID_hYO5VeQ             False                  False          True  \n",
       "00ROwAuUX6u96xrmDhwVA              False                  False         False  \n",
       "00lWWjn9WAKt_mPnzmfXQ               True                  False         False  "
      ]
     },
     "execution_count": 215,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_dummies = pd.get_dummies(df, drop_first=True)\n",
    "df_dummies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['qorders', 'days_since_registration', 'days_since_last_purchase',\n",
       "       'gender_MALE', 'gender_UNKNOWN', 'income_LOW', 'income_MID',\n",
       "       'income_MID_HIGH', 'income_MID_LOW', 'income_UNKNOWN', 'lifecycle_New',\n",
       "       'lifecycle_Onboarded', 'lifecycle_Prospect', 'lifecycle_Stable',\n",
       "       'lifecycle_Super_Heavy', 'status_Churn'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 216,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#print columnas\n",
    "df_dummies.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "qorders                     int64\n",
       "days_since_registration     int64\n",
       "days_since_last_purchase    int64\n",
       "income_LOW                   bool\n",
       "income_MID                   bool\n",
       "income_MID_HIGH              bool\n",
       "income_MID_LOW               bool\n",
       "income_UNKNOWN               bool\n",
       "lifecycle_New                bool\n",
       "lifecycle_Onboarded          bool\n",
       "lifecycle_Prospect           bool\n",
       "lifecycle_Stable             bool\n",
       "lifecycle_Super_Heavy        bool\n",
       "status_Churn                 bool\n",
       "dtype: object"
      ]
     },
     "execution_count": 143,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#verificar tipos de datos\n",
    "df_dummies.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "metadata": {},
   "outputs": [],
   "source": [
    "#defino la variable a predecir\n",
    "y = df_dummies['status_Churn']\n",
    "#defino los regresores (excluyo mi variable target)\n",
    "X = df_dummies.drop(columns = ['status_Churn'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Shape X: (26136, 15)\n",
      "Type X: <class 'pandas.core.frame.DataFrame'>\n",
      "Shape y: (26136,)\n",
      "Type y: <class 'pandas.core.series.Series'>\n"
     ]
    }
   ],
   "source": [
    "# Verificamos los shapes y los tipos de X e y:\n",
    "print(\"Shape X:\", X.shape)\n",
    "print(\"Type X:\", type(X))\n",
    "print(\"Shape y:\", y.shape)\n",
    "print(\"Type y:\", type(y))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Dividimos los datos en Train y Test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "# Definimos la semilla\n",
    "rs = 15\n",
    "\n",
    "# Dividimos los datos en Train y Test\n",
    "X_train, X_test, y_train, y_test = \\\n",
    "                    train_test_split(X, y, stratify=y, test_size=0.25, random_state=rs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train.shape:  (19602, 15)\n",
      "y_train.shape:  (19602,)\n",
      "X_test.shape:  (6534, 15)\n",
      "y_test.shape:  (6534,)\n"
     ]
    }
   ],
   "source": [
    "print('X_train.shape: ', X_train.shape)\n",
    "print('y_train.shape: ', y_train.shape)\n",
    "print('X_test.shape: ', X_test.shape)\n",
    "print('y_test.shape: ', y_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "y: [0.80123202 0.19876798]\n",
      "y train: [0.80124477 0.19875523]\n",
      "y test: [0.80119376 0.19880624]\n"
     ]
    }
   ],
   "source": [
    "# Verificamos la distribución de las clases en Train y Test\n",
    "print('y:', y.value_counts(normalize=True).values)\n",
    "\n",
    "print('y train:', y_train.value_counts(normalize=True).values)\n",
    "\n",
    "print('y test:', y_test.value_counts(normalize=True).values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "\n",
    "# Instanciamos el StandardScaler\n",
    "scaler = StandardScaler()\n",
    "\n",
    "# Ajustamos y transformamos los datos de Train\n",
    "X_train = pd.DataFrame(scaler.fit_transform(X_train), index=X_train.index, \\\n",
    "                           columns= X_train.columns)\n",
    "\n",
    "# Transformamos los datos de Test\n",
    "X_test = pd.DataFrame(scaler.transform(X_test), index=X_test.index, \\\n",
    "                           columns= X_test.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Instanciamos el modelo\n",
    "lor_reg = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Ajustamos el modelo\n",
    "lor_reg.fit(X_train, y_train)\n",
    "\n",
    "y_pred_train_proba = lor_reg.predict_proba(X_train)\n",
    "\n",
    "y_pred_test = lor_reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Verificamos las predicciones\n",
    "y_pred_train = y_pred_train_proba[:,1] > 0.5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy en el set de entrenamiento = 0.8680\n",
      "Accuracy en el set de testeo = 0.8653\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "# Calculamos el accuracy\n",
    "\n",
    "print('Accuracy en el set de entrenamiento = {:.4f}'.format(accuracy_score(y_train, \\\n",
    "                                                                       y_pred_train)))\n",
    "\n",
    "print('Accuracy en el set de testeo = {:.4f}'.format(accuracy_score(y_test, \\\n",
    "                                                                       y_pred_test)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "user_id\n",
      "rYr0L1uXUDOYSNy2zIexeQ    False\n",
      "KEZUQ1BGV7qWRuIybki6MQ     True\n",
      "g1UOIFCdXL2GfsEvwc8xag     True\n",
      "i55jLcikUEC40TX64zdzEA     True\n",
      "ZuthNtpjW3eWCIJAGnLH7Q     True\n",
      "                          ...  \n",
      "QjyMDnAwWG2yaPQK9zfnuw    False\n",
      "jgUh7sIvUccfTkSEDf5lg     False\n",
      "XkR2nOscWvejOcl2Qoz8OA    False\n",
      "IFZ_e12oWdOhT1Cr4Ze5FQ    False\n",
      "KGvwpmvpW_Oor3pjgfGbzg    False\n",
      "Name: status_Churn, Length: 6534, dtype: bool\n"
     ]
    }
   ],
   "source": [
    "print(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False  True  True ... False False False]\n"
     ]
    }
   ],
   "source": [
    "print(y_pred_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Matriz de confusión"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x24e31a085d0>"
      ]
     },
     "execution_count": 232,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#creamos matriz de confusion\n",
    "from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n",
    "\n",
    "cm = confusion_matrix(y_test, y_pred_test)\n",
    "cm_transposed = cm.T\n",
    "\n",
    "disp = ConfusionMatrixDisplay(confusion_matrix=cm_transposed)\n",
    "\n",
    "disp.plot()\n",
    "\n",
    "#donde 1 es churn y 0 no churn\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Accuracy, precision, recall, f1-score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "       False       0.90      0.94      0.92      5235\n",
      "        True       0.69      0.58      0.63      1299\n",
      "\n",
      "    accuracy                           0.87      6534\n",
      "   macro avg       0.80      0.76      0.77      6534\n",
      "weighted avg       0.86      0.87      0.86      6534\n",
      "\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import classification_report\n",
    "\n",
    "print(classification_report(y_test, y_pred_test))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Feature importance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\flore\\AppData\\Local\\Temp\\ipykernel_33328\\3898536062.py:11: FutureWarning: \n",
      "\n",
      "Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `y` variable to `hue` and set `legend=False` for the same effect.\n",
      "\n",
      "  sns.barplot(x='coef', y=coef.index, data=coef, palette='coolwarm')\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#crear un dataframe con los coeficientes\n",
    "coef = pd.DataFrame(lor_reg.coef_, columns=X.columns)\n",
    "coef = coef.T\n",
    "coef.columns = ['coef']\n",
    "coef['abs_coef'] = abs(coef['coef'])\n",
    "coef = coef.sort_values(by='abs_coef', ascending=False)\n",
    "coef\n",
    "\n",
    "#graficar los coeficientes\n",
    "plt.figure(figsize=(10, 6))\n",
    "sns.barplot(x='coef', y=coef.index, data=coef, palette='coolwarm')\n",
    "plt.title('Feature Importance')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Exportar a pickle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Exportar el modelo a un archivo pickle\n",
    "import pickle\n",
    "\n",
    "with open('model.pkl', 'wb') as model_file:\n",
    "    pickle.dump(lor_reg, model_file)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[False  True  True ... False False False]\n"
     ]
    }
   ],
   "source": [
    "#Importar el modelo desde un archivo pickle\n",
    "with open('model.pkl', 'rb') as model_file:\n",
    "    model = pickle.load(model_file)\n",
    "\n",
    "#verificar que el modelo importado funciona\n",
    "y_pred_test = model.predict(X_test)\n",
    "print(y_pred_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['qorders', 'days_since_registration', 'days_since_last_purchase',\n",
      "       'gender_MALE', 'gender_UNKNOWN', 'income_LOW', 'income_MID',\n",
      "       'income_MID_HIGH', 'income_MID_LOW', 'income_UNKNOWN', 'lifecycle_New',\n",
      "       'lifecycle_Onboarded', 'lifecycle_Prospect', 'lifecycle_Stable',\n",
      "       'lifecycle_Super_Heavy'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "#obtener los regresores necesarios para el modelo\n",
    "regressors = X.columns\n",
    "print(regressors)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
